// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String?   @unique
  username       String?   @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  Account        Account[]
  Session        Session[]
  bio            String?   @db.String
  rating         Int?      @db.Int
  gamesPlayed    Int?      @db.Int
  gamesWon       Int?      @db.Int
  gamesLost      Int?      @db.Int
  gamesDrawn     Int?      @db.Int
  // gameIds        String[]  @db.ObjectId
  // games          Game[]    @relation(fields: [gameIds], references: [id])
  Wins           Game[]    @relation("Wins")
  Losses         Game[]    @relation("Losses")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?    @db.Int
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  moves     String[]
  msgs      String[]
  result    String

  winner   User?   @relation(fields: [winnerId], references: [id], name: "Wins")
  winnerId String? @db.ObjectId
  loser    User?   @relation(fields: [loserId], references: [id], name: "Losses")
  loserId  String? @db.ObjectId
  draw     Boolean
}
